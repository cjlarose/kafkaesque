const assert = require('assert');
const Long = require('long');
const { parseProduceRequest,
        writeProduceResponse,
        parseFetchRequest,
        parseMetadataRequest,
        writeMetadataResponse } = require('../src/messages');

describe('parseProduceRequest', () => {
  it('parses a produce request with multiple messages for the same partition', () => {

    const request = Buffer.from([
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
      0x00, 0x16, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x65,
      0x73, 0x71, 0x75, 0x65, 0x2d, 0x74, 0x65, 0x73,
      0x74, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
      0x00, 0x01, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x07, 0x74, 0x6f, 0x70, 0x69,
      0x63, 0x2d, 0x61, 0x00, 0x00, 0x00, 0x01, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x16, 0x48, 0xd5, 0x9e, 0xe0, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
      0x08, 0x48, 0x69, 0x20, 0x67, 0x75, 0x79, 0x73,
      0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x18, 0x67, 0x4d, 0x87,
      0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x48,
      0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00, 0x05,
      0x57, 0x6f, 0x72, 0x6c, 0x64,
    ]);

    const expectedMessage = {
      header: {
        apiKey: 0,
        apiVersion: 1,
        correlationId: 1,
        clientId: 'kafkaesque-test-client',
      },
      requiredAcks: 1,
      timeoutMs: 30000,
      topics: [
        {
          name: 'topic-a',
          partitionMessageSetPairs: [
            {
              partition: 0,
              messageSet: [
                {
                  offset: Long.ZERO,
                  message: {
                    crc32: Buffer.from([0x48, 0xd5, 0x9e, 0xe0]),
                    magicByte: 0,
                    attributes: 0,
                    key: null,
                    value: Buffer.from('Hi guys!', 'utf8'),
                  },
                },
                {
                  offset: Long.ZERO,
                  message: {
                    crc32: Buffer.from([0x67, 0x4d, 0x87, 0xee]),
                    magicByte: 0,
                    attributes: 0,
                    key: Buffer.from('Hello', 'utf8'),
                    value: Buffer.from('World', 'utf8'),
                  },
                },
              ],
            },
          ],
        },
      ],
    };

    const actualMessage = parseProduceRequest(request);

    assert.deepEqual(actualMessage, expectedMessage);
  });

  it('parses a produce request with multiple messages in different partitions', () => {

    const request = Buffer.from([
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03,
      0x00, 0x16, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x65,
      0x73, 0x71, 0x75, 0x65, 0x2d, 0x74, 0x65, 0x73,
      0x74, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
      0x00, 0x01, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x07, 0x74, 0x6f, 0x70, 0x69,
      0x63, 0x2d, 0x61, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x17, 0x7f, 0x08, 0xaf, 0xa5, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
      0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
      0x20, 0x31, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00,
      0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xe6, 0x01,
      0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0x00, 0x00, 0x00, 0x09, 0x4d, 0x65, 0x73, 0x73,
      0x61, 0x67, 0x65, 0x20, 0x32,
    ]);

    const expectedMessage = {
      header: {
        apiKey: 0,
        apiVersion: 1,
        correlationId: 3,
        clientId: 'kafkaesque-test-client',
      },
      requiredAcks: 1,
      timeoutMs: 30000,
      topics: [
        {
          name: 'topic-a',
          partitionMessageSetPairs: [
            {
              partition: 0,
              messageSet: [
                {
                  offset: Long.ZERO,
                  message: {
                    crc32: Buffer.from([0x7f, 0x08, 0xaf, 0xa5]),
                    magicByte: 0,
                    attributes: 0,
                    key: null,
                    value: Buffer.from('Message 1', 'utf8'),
                  },
                },
              ],
            },
            {
              partition: 21,
              messageSet: [
                {
                  offset: Long.ZERO,
                  message: {
                    crc32: Buffer.from([0xe6, 0x01, 0xfe, 0x1f]),
                    magicByte: 0,
                    attributes: 0,
                    key: null,
                    value: Buffer.from('Message 2', 'utf8'),
                  },
                },
              ],
            },
          ],
        },
      ],
    };

    const actualMessage = parseProduceRequest(request);

    assert.deepEqual(actualMessage, expectedMessage);
  });

  it('parses a produce request with multiple messages in different topics', () => {

    const request = Buffer.from([
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03,
      0x00, 0x16, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x65,
      0x73, 0x71, 0x75, 0x65, 0x2d, 0x74, 0x65, 0x73,
      0x74, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
      0x00, 0x01, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00,
      0x00, 0x02, 0x00, 0x07, 0x74, 0x6f, 0x70, 0x69,
      0x63, 0x2d, 0x61, 0x00, 0x00, 0x00, 0x01, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x17, 0x7f, 0x08, 0xaf, 0xa5, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
      0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
      0x20, 0x31, 0x00, 0x07, 0x74, 0x6f, 0x70, 0x69,
      0x63, 0x2d, 0x62, 0x00, 0x00, 0x00, 0x01, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x17, 0xe6, 0x01, 0xfe, 0x1f, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
      0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
      0x20, 0x32,
    ]);

    const expectedMessage = {
      header: {
        apiKey: 0,
        apiVersion: 1,
        correlationId: 3,
        clientId: 'kafkaesque-test-client',
      },
      requiredAcks: 1,
      timeoutMs: 30000,
      topics: [
        {
          name: 'topic-a',
          partitionMessageSetPairs: [
            {
              partition: 0,
              messageSet: [
                {
                  offset: Long.ZERO,
                  message: {
                    crc32: Buffer.from([0x7f, 0x08, 0xaf, 0xa5]),
                    magicByte: 0,
                    attributes: 0,
                    key: null,
                    value: Buffer.from('Message 1', 'utf8'),
                  },
                },
              ],
            },
          ],
        },
        {
          name: 'topic-b',
          partitionMessageSetPairs: [
            {
              partition: 3,
              messageSet: [
                {
                  offset: Long.ZERO,
                  message: {
                    crc32: Buffer.from([0xe6, 0x01, 0xfe, 0x1f]),
                    magicByte: 0,
                    attributes: 0,
                    key: null,
                    value: Buffer.from('Message 2', 'utf8'),
                  },
                },
              ],
            },
          ],
        },
      ],
    };

    const actualMessage = parseProduceRequest(request);

    assert.deepEqual(actualMessage, expectedMessage);
  });
});

describe('writeProduceResponse', () => {
  it('encodes responses', () => {
    const values = {
      correlationId: 18,
      topicResponses: [
        {
          topic: 'topic-a',
          partitionResponses: [
            {
              partition: 3,
              errorCode: 4,
              baseOffset: 12,
            },
          ],
        },
        {
          topic: 'topic-b',
          partitionResponses: [
            {
              partition: 7,
              errorCode: 2,
              baseOffset: 89,
            },
            {
              partition: 0,
              errorCode: 0,
              baseOffset: 21,
            },
          ],
        },
      ],
      throttleTimeMs: 30000,
    };

    const expectedReponse = Buffer.from([
      0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2d,
      0x61, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x0c, 0x00, 0x07, 0x74, 0x6f, 0x70,
      0x69, 0x63, 0x2d, 0x62, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x00, 0x00, 0x07, 0x00, 0x02, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x75, 0x30,
    ]);

    const actualResponse = writeProduceResponse(values);
    assert.deepEqual(actualResponse, expectedReponse);
  });
});

describe('parseMetadataRequest', () => {
  it('parses requests with unspecified topics', () => {
    const request = Buffer.from([
      0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
      0x00, 0x16, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x65,
      0x73, 0x71, 0x75, 0x65, 0x2d, 0x74, 0x65, 0x73,
      0x74, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
      0x00, 0x00, 0x00, 0x00,
    ]);

    const expectedMessage = {
      header: {
        apiKey: 3,
        apiVersion: 0,
        correlationId: 3,
        clientId: 'kafkaesque-test-client',
      },
      topics: [],
    };

    const actualMessage = parseMetadataRequest(request);
    assert.deepEqual(actualMessage, expectedMessage);
  });

  it('parses requests with specified topics', () => {
    const request = Buffer.from([
      0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
      0x00, 0x16, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x65,
      0x73, 0x71, 0x75, 0x65, 0x2d, 0x74, 0x65, 0x73,
      0x74, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
      0x00, 0x00, 0x00, 0x02, 0x00, 0x05, 0x68, 0x65,
      0x6c, 0x6c, 0x6f, 0x00, 0x05, 0x77, 0x6f, 0x72,
      0x6c, 0x64,
    ]);

    const expectedMessage = {
      header: {
        apiKey: 3,
        apiVersion: 0,
        correlationId: 3,
        clientId: 'kafkaesque-test-client',
      },
      topics: ['hello', 'world'],
    };

    const actualMessage = parseMetadataRequest(request);
    assert.deepEqual(actualMessage, expectedMessage);
  });
});

describe('writeMetadataResponse', () => {
  it('encodes responses', () => {
    const values = {
      correlationId: 7,
      brokers: [
        {
          nodeId: 0,
          host: 'localhost',
          port: 9092,
        },
        {
          nodeId: 16,
          host: 'localhost',
          port: 9093,
        },
      ],
      topicMetadata: [
        {
          errorCode: 0,
          name: 'test',
          partitionMetadata: [
            {
              errorCode: 0,
              partitionId: 8,
              leader: 0,
              replicas: [0],
              isrs: [0],
            },
            {
              errorCode: 0,
              partitionId: 42,
              leader: 16,
              replicas: [0, 16],
              isrs: [0, 16],
            },
          ],
        },
      ],
    };

    const expectedReponse = Buffer.from([
      0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x6c, 0x6f,
      0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x00,
      0x00, 0x23, 0x84, 0x00, 0x00, 0x00, 0x10, 0x00,
      0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f,
      0x73, 0x74, 0x00, 0x00, 0x23, 0x85, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x74, 0x65,
      0x73, 0x74, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00,
      0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
      0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x10,
    ]);

    const actualResponse = writeMetadataResponse(values);
    assert.deepEqual(actualResponse, expectedReponse);
  });
});


describe('parseFetchRequest', () => {
  it('parses requests', () => {
    const request = Buffer.from([
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
      0x00, 0x16, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x65,
      0x73, 0x71, 0x75, 0x65, 0x2d, 0x74, 0x65, 0x73,
      0x74, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x64,
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
      0x00, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2d,
      0x61, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x0f, 0x00, 0x10, 0x00, 0x00,
    ]);

    const expectedMessage = {
      header: {
        apiKey: 1,
        apiVersion: 0,
        correlationId: 4,
        clientId: 'kafkaesque-test-client',
      },
      replicaId: -1,
      maxWaitTimeMs: 100,
      minBytes: 1,
      topics: [
        {
          name: 'topic-a',
          partitions: [
            {
              partitionId: 0,
              offset: Long.fromInt(15),
              maxBytes: 1048576,
            },
          ],
        },
      ],
    };

    const actualMessage = parseFetchRequest(request);
    assert.deepEqual(actualMessage, expectedMessage);
  });
});
